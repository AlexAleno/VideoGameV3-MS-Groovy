```plant uml
@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
' uncomment the following line and comment the first to use locally
' !include C4_Container.puml

' LAYOUT_TOP_DOWN()
' LAYOUT_AS_SKETCH()
LAYOUT_WITH_LEGEND()
AddElementTag("microService", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white", $legendText="micro service\neight sided")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")

SHOW_PERSON_OUTLINE()

title System Context diagram for Car Dealership System

Person(user, "User", "A user browsing the application.")


System_Boundary(c1, "Car Dealership System") {
    Container(web_app, "Web Application", "Java, Spring MVC", "Delivers the static content and the Internet banking SPA")
    Container(spa, "Single-Page App", "JavaScript, Angular", "Provides all the Internet banking functionality to customers via their web browser")
    Container(api_gateway, "API-gateway", "Java, Docker Container", "Provides Internet banking functionality via API")
    Container(cs, "user-service", "Java, Docker Container", "Provides Internet banking functionality via API")
    Container(es, "game-management-service", "Java, Docker Container", "Provides Internet banking functionality via API")
    Container(is, "download-management-service", "Java, Docker Container", "Provides Internet banking functionality via API")
    Container(ps, "purchase-service", "Java, Docker Container", "Provides Internet banking functionality via API")

ContainerDb(cust_db, "user-db", "MySQL", "Stores a normalized version of all user data", $tags = "storage")
ContainerDb(empl_db, "game-db", "MySQL", "Stores a normalized version of all games data", $tags = "storage")
ContainerDb(invent_db, "owned-game-db", "MySQL", "Stores a normalized version of all games owned data", $tags = "storage")
ContainerDb(purch_db, "purchases-db", "MySQL", "Stores a normalized version of all business data for ad hoc reporting purposes", $tags = "storage")
}

Rel_Neighbor(web_app, spa, "Delivers")
Rel(spa, api_gateway, "Uses", "async, JSON/HTTPS")

Rel(user, web_app, "Uses", "HTTPS")
Rel(user, spa, "Uses", "HTTPS")
Rel(api_gateway, cs, "Uses", "HTTPS")
Rel(api_gateway, es, "Uses", "HTTPS")
Rel(api_gateway, is, "Uses", "HTTPS")
Rel(api_gateway, ps, "Uses", "HTTPS")

Rel(ps, es, "Uses", "HTTPS")
Rel(ps, is, "Uses", "HTTPS")
Rel(ps, cs, "Uses", "HTTPS")


Rel_D(ps, purch_db, "reads ...", "JDBC/SQL/TCP")
Rel_D(es, empl_db, "reads ...", "JDBC/SQL/TCP")
Rel_D(is, invent_db, "reads ...", "JDBC/SQL/TCP")
Rel_D(cs, cust_db, "reads ...", "JDBC/SQL/TCP")

@enduml
```