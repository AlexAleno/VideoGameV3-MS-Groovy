# This is a Spring Boot configuration file in YAML format.
# It defines settings for the application, particularly for the "prod" profile.
# Server configuration
server:
  port: 8080  # The port on which the application will run.
  #    servlet:
  #        context-path: /api  # The base path for all endpoints in the application.
  error:
    include-message: always
# Logging configuration
logging:
  level:
    org.springframework.jdbc.datasource.init: DEBUG
    root: INFO  # Default logging level for the application.
    org.springframework.web: DEBUG  # Debug-level logging for Spring web components.
    com.champsoft: TRACE  # Trace-level logging for a specific package (e.g., com.example).
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

---
# Spring configuration specifically for the "docker" profile
spring:
  config:
    activate:
      on-profile: docker
  # Application-specific settings
  application:
    # The name of the application. Used for identification in logs and monitoring tools.
    name: game-management
  # DataSource configuration for connecting to the database
  datasource:
    # --- CHANGED: Updated JDBC URL for PostgreSQL ---
    # Points to the 'postgres-game' service defined in docker-compose.yml
    # Uses the standard PostgreSQL port 5432 (internal container port)
    # Connects to the 'game-db' database
    url: jdbc:postgresql://postgres-game:5432/game-db
    # Database username (matches POSTGRES_USER in docker-compose)
    username: user
    # Database password (matches POSTGRES_PASSWORD in docker-compose)
    password: pwd
    # --- CHANGED: Updated JDBC driver class for PostgreSQL ---
    driver-class-name: org.postgresql.Driver

  # JPA (Java Persistence API) configuration for database interaction
  jpa:
    # Hibernate-specific settings
    hibernate:
      # Hibernate schema generation mode.
      # "none" means no schema changes are made automatically.
      # Consider "update" during development if you want Hibernate to manage schema changes.
      # Ensure your SQL scripts are compatible if using "none".
      ddl-auto: none
    # Whether to log SQL statements to the console. Useful for debugging.
    show-sql: true
    # Additional properties for Hibernate
    properties:
      hibernate:
        # Whether to format SQL statements in logs for better readability.
        format_sql: true
        # --- ADDED: Specify the PostgreSQL dialect for Hibernate ---
        # Helps Hibernate generate optimized SQL for PostgreSQL
        dialect: org.hibernate.dialect.PostgreSQLDialect

  # SQL initialization settings
  sql:
    init:
      # --- CHANGED: Specifies the database platform as PostgreSQL ---
      # Spring Boot will now look for files named schema-postgres.sql and data-postgres.sql
      # (or schema.sql/data.sql if platform-specific files aren't found).
      platform: postgres
      # Specifies when to initialize the database.
      # "always" means SQL scripts will always be executed on startup.
      mode: always
      logging:
        enabled: true


#  # H2 Test Profile Configuration
#  spring:
#    config:
#      activate:
#        on-profile: h2
#    # Datasource configuration specifically for H2 tests
#    datasource:
#      # Use a unique DB name for tests; DB_CLOSE_DELAY keeps it alive for the test duration
#      url: jdbc:h2:mem:userdb-test;DB_CLOSE_DELAY=-1;NON_KEYWORDS=YEAR,VALUE # Added keywords that might conflict
#      driverClassName: org.h2.Driver
#      username: sa # Default H2 user
#      password: '' # Default H2 password is empty string
#    # JPA configuration specifically for H2 tests
#    jpa:
#      hibernate:
#        # Create schema on startup, drop on shutdown for a clean slate each test run
#        ddl-auto: create-drop
#      # Set the dialect explicitly for H2
#      database-platform: org.hibernate.dialect.H2Dialect
#      show-sql: true # Optional: show SQL in test logs
#      properties:
#        hibernate:
#          format_sql: true # Format SQL logs nicely
#    # H2 Console (Optional, useful for debugging tests via browser)
#    h2:
#      console:
#        enabled: true
#        path: /h2-console # Access path
#        settings:
#          web-allow-others: true # Allows access from other machines if needed (use cautiously)
#    # SQL initialization for H2 (Optional - only needed if NOT relying solely on ddl-auto)
#    # If you have src/test/resources/schema.sql or data.sql, Spring Boot should pick them up by default with H2.
#    # You might not need this section explicitly unless you use different filenames or platforms.
#    # sql:
#    #  init:
#    #    mode: embedded # Runs schema.sql and data.sql from classpath if present
#    #    platform: h2